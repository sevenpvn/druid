# This is an autogenerated function, ported from the original legacy version.
# It /should work/ as is, but will not have all the benefits of the modern
# function API. You should see the function docs to learn how to add function
# signatures for type safety and to document this function using puppet-strings.
#
# https://puppet.com/docs/puppet/latest/custom_functions_ruby.html
#
# ---- original file header ----

# ---- original file header ----
#
# @summary
#       Return percentage of total memory.
#
#    The first parameter is the percentage of memory to return, and is
#    expected to be a number between 0 and 100.
#
#    The second parameter specifies the minimum memory amount to return.
#    If the computed percentage is less then this value this value is
#    returned. This value is expected to be in the same JVM form that this
#    function returns (i.e. 5g, 128m, 256k).  This defaults to 256m.
#
#
Puppet::Functions.create_function(:'druid::percent_mem') do
  # @param args
  #   The original array of arguments. Port this to individually managed params
  #   to get the full benefit of the modern function API.
  #
  # @return [Data type]
  #   Describe what the function returns here
  #
  dispatch :default_impl do
    # Call the method named 'default_impl' when this is matched
    # Port this to match individual params for better type safety
    repeated_param 'Any', :args
  end


  def default_impl(*args)
    
    pct = Float(args[0])

    if not pct.between?(0, 100)
      raise(Puppet::ParseError, "percent_mem(): #{pct} is not in [0, 100]")
    end

    prefixes = {
      "kb" => 1024,
      "mb" => 1024**2,
      "gb" => 1024**3,
      "tb" => 1024**4,
      "pb" => 1024**5,
      "eb" => 1024**6,
      "zb" => 1024**7,
      "yb" => 1024**8
    }

    if args.size > 1
      min_val = Float(args[1][/^[0-9.]+/])
      min_unit = args[1][/^[0-9.]+(.)/, 1].downcase + 'b'
      min_bytes = prefixes[min_unit] * min_val
    else
      min_val = 256.0
      min_unit = 'mb'
      min_bytes = 268435456
    end

    mem_size = lookupvar('memorysize')
    val = mem_size[/^[0-9.]+/].to_f
    unit = mem_size[/^[0-9.]+ (.*)$/, 1].downcase
    scale = prefixes[unit]
    bytes = scale * val * pct / 100.0

    if bytes < min_bytes
      retval = min_val.round.to_s + min_unit[0]
    else 
      prefixes.select{|p,v| v <= scale}.sort_by{|p,v| -v}.each do |p,v|
        scaled = (bytes / v).round
        if scaled != 0
          retval = scaled.to_s + p[0]
          break
        end
      end
    end

    retval

  
  end
end
